// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistance;

namespace Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32");

            modelBuilder.Entity("Persistance.AccountingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AccountingUnits");
                });

            modelBuilder.Entity("Persistance.ChildOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("HeadOrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("HeadOrganizationId");

                    b.ToTable("ChildOrganizations");
                });

            modelBuilder.Entity("Persistance.Consumer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OwnerOrganizationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("Persistance.CurrentTransformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MeasurementPointId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("NextVerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TransformationRatio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementPointId")
                        .IsUnique();

                    b.ToTable("CurrentTransformers");
                });

            modelBuilder.Entity("Persistance.DeliveryPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountingInitId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaximumPowerOutputInKilowatts")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("ConsumerId");

                    b.ToTable("DeliveryPoints");
                });

            modelBuilder.Entity("Persistance.ElectricityMeter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MeasurementPointId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("NextVerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementPointId")
                        .IsUnique();

                    b.ToTable("ElectricityMeters");
                });

            modelBuilder.Entity("Persistance.Entities.MeasurementPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountingUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeasurementPointId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Start")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountingUnitId");

                    b.HasIndex("MeasurementPointId");

                    b.ToTable("MeasurementPeriods");
                });

            modelBuilder.Entity("Persistance.HeadOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HeadOrganizations");
                });

            modelBuilder.Entity("Persistance.MeasurementPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConsumerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.ToTable("MeasurementPoints");
                });

            modelBuilder.Entity("Persistance.VoltageTransformer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MeasurementPointId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("NextVerificationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TransformationRatio")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeasurementPointId")
                        .IsUnique();

                    b.ToTable("VoltageTransformers");
                });

            modelBuilder.Entity("Persistance.ChildOrganization", b =>
                {
                    b.HasOne("Persistance.HeadOrganization", "HeadOrganization")
                        .WithMany("Children")
                        .HasForeignKey("HeadOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistance.Consumer", b =>
                {
                    b.HasOne("Persistance.ChildOrganization", "Owner")
                        .WithMany("Consumers")
                        .HasForeignKey("OwnerId");
                });

            modelBuilder.Entity("Persistance.CurrentTransformer", b =>
                {
                    b.HasOne("Persistance.MeasurementPoint", "MeasurementPoint")
                        .WithOne("CurrentTransformer")
                        .HasForeignKey("Persistance.CurrentTransformer", "MeasurementPointId");
                });

            modelBuilder.Entity("Persistance.DeliveryPoint", b =>
                {
                    b.HasOne("Persistance.AccountingUnit", "AccountingUnit")
                        .WithMany()
                        .HasForeignKey("AccountingUnitId");

                    b.HasOne("Persistance.Consumer", "Consumer")
                        .WithMany("DeliveryPoints")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistance.ElectricityMeter", b =>
                {
                    b.HasOne("Persistance.MeasurementPoint", "MeasurementPoint")
                        .WithOne("ElectricityMeter")
                        .HasForeignKey("Persistance.ElectricityMeter", "MeasurementPointId");
                });

            modelBuilder.Entity("Persistance.Entities.MeasurementPeriod", b =>
                {
                    b.HasOne("Persistance.AccountingUnit", "AccountingUnit")
                        .WithMany("MeasurementPeriods")
                        .HasForeignKey("AccountingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Persistance.MeasurementPoint", "MeasurementPoint")
                        .WithMany("MeasurementPeriods")
                        .HasForeignKey("MeasurementPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistance.MeasurementPoint", b =>
                {
                    b.HasOne("Persistance.Consumer", "Consumer")
                        .WithMany("MeasurementPoints")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Persistance.VoltageTransformer", b =>
                {
                    b.HasOne("Persistance.MeasurementPoint", "MeasurementPoint")
                        .WithOne("VoltageTransformer")
                        .HasForeignKey("Persistance.VoltageTransformer", "MeasurementPointId");
                });
#pragma warning restore 612, 618
        }
    }
}
